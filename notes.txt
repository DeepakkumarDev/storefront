Introduction to data modeling
Building an e-commerce data mo

organizing models in apps
coding model classes


introduction to data modeling

product 
title
description
price
inventory

Collection
title



we have to esatblish or association between product and collection 
1 to many relationship benween product and collection




relationship can be 
one to one
one to many
many to many


Building an Ecommerce Data model

product 0-1 collection



product *-* cart (many to many from product to cart)
        created_at

            |
            |
            |
 product 1 -* cartItem-0-1 -cart
        quantity
Cartitem is an association class

any one can have cart whether they are regostered user or not


product     customer

     *-*       order*-1

many to many relationship with product and order 
and 1 to many relationship with customer and order

ordeitem is association class between prodcut and order

product to order item one to many relationship


prodcut *-* tag

product to tag can have many to many relationship



apps in django has different functionality


we can have single apps like store
product
collection
cart
cartitem
order
orderitem
customer

But theres is a problem here
as this application grow it will be loded with too many fields


this is called Monolith 
it will radd to use and modify

we van brek it into many apps
products         customers      cart        orders
product           customer      cart        order
collection                      cartitem    orderitem 
tag


carts depend on products applicationorders depend on cart and customers app
but there is problem

if you publish a products that migh cost cart and orders app
since we need to upgrade all the app together more work
and downot make sense  having shping cart functility without having product catalog



so we should crete a two app one is store and another tags
store               tags
product             Tag
collection          TaggedItem
customer
cart
cartitem
order
orderitem
it is self contained and zero coupling
we should desgin MINIMAL COUPLING
HIGH COHESION (FOCUS)

python3 manage.py startapp store
python3 manage.py startapp tags


registered with installed apps in settings

field types
field options
we geneteare the databse table using the defintion of model



creating migrations
running migrationsreverting migrations'populating the databases

suportde database engines
Sqlite

postgreSql
MySq;
Mariadb
Oracle

Ms SQl Server


in djnago we djnago we use migration to update and crete table in database 
python3 manage.py makemigrations

once you run the command djnago will use 

(.venv) deepak@deepak-HP-ProBook-445-G1:~/Videos/django-project/storefront$ python3 manage.py makemigrations
Migrations for 'store':
  store/migrations/0001_initial.py
    - Create model Cart
    - Create model Collection
    - Create model Customer
    - Create model Promotion
    - Create model Address
    - Create model Order
    - Create model Product
    - Create model OrderItem
    - Add field featured_product to collection
    - Create model CartItem
Migrations for 'tags':
  tags/migrations/0001_initial.py
    - Create model Tag
    - Create model TaggedItem
(.venv) deepak@deepak-HP-ProBook-445-G1:~/Videos/django-project/storefront$ python3 manage.py makemigrations
No changes detected
(.venv) deepak@deepak-HP-ProBook-445-G1:~/Videos/django-project/storefront$ git add -A


(.venv) deepak@deepak-HP-ProBook-445-G1:~/Videos/django-project/storefront$ python3 manage.py makemigrations
Was product.price renamed to product.unit_price (a DecimalField)? [y/N] y
Migrations for 'store':
  store/migrations/0002_rename_price_product_unit_price.py
    - Rename field price on product to unit_price
(.venv) deepak@deepak-HP-ProBook-445-G1:~/Videos/django-project/storefront$ 

(.venv) deepak@deepak-HP-ProBook-445-G1:~/Videos/django-project/storefront$ python3 manage.py makemigrations
It is impossible to add a non-nullable field 'slug' to product without specifying a default. This is because the database needs something to populate existing rows.
Please select a fix:
 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
 2) Quit and manually define a default value in models.py.
Select an option: 2
(.venv) deepak@deepak-HP-ProBook-445-G1:~/Videos/django-project/storefront$ python3 manage.py makemigrations
It is impossible to add a non-nullable field 'slug' to product without specifying a default. This is because the database needs something to populate existing rows.
Please select a fix:
 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
 2) Quit and manually define a default value in models.py.
Select an option: 1
Please enter the default value as valid Python.
The datetime and django.utils.timezone modules are available, so it is possible to provide e.g. timezone.now as a value.
Type 'exit' to exit this prompt
>>> '-'
Migrations for 'store':
  store/migrations/0003_product_slug.py
    - Add field slug to product
Migrations for 'likes':
  likes/migrations/0001_initial.py
    - Create model LikedItem
(.venv) deepak@deepak-HP-ProBook-445-G1:~/Videos/django-project/storefront$ 

so here you have added defualt value of  '-' it will be in migrations and can be used only once 
since it is not in class model 



(.venv) deepak@deepak-HP-ProBook-445-G1:~/Videos/django-project/storefront$ python3 manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, likes, sessions, store, tags
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying auth.0010_alter_group_name_max_length... OK
  Applying auth.0011_update_proxy_permissions... OK
  Applying auth.0012_alter_user_first_name_max_length... OK
  Applying likes.0001_initial... OK
  Applying sessions.0001_initial... OK
  Applying store.0001_initial... OK
  Applying store.0002_rename_price_to_unit_price... OK
  Applying store.0003_add_slug_to_product... OK
  Applying tags.0001_initial... OK
(.venv) deepak@deepak-HP-ProBook-445-G1:~/Videos/django-project/storefront$ 

(.venv) deepak@deepak-HP-ProBook-445-G1:~/Videos/django-project/storefront$ python3 manage.py sqlmigrate store 0003
BEGIN;
--
-- Add field slug to product
--
CREATE TABLE "new__store_product" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "slug" varchar(50) NOT NULL, "title" varchar(255) NOT NULL, "description" text NOT NULL, "inventory" integer NOT NULL, "last_update" datetime NOT NULL, "collection_id" bigint NOT NULL REFERENCES "store_collection" ("id") DEFERRABLE INITIALLY DEFERRED, "unit_price" decimal NOT NULL);
INSERT INTO "new__store_product" ("id", "title", "description", "inventory", "last_update", "collection_id", "unit_price", "slug") SELECT "id", "title", "description", "inventory", "last_update", "collection_id", "unit_price", '-' FROM "store_product";
DROP TABLE "store_product";
ALTER TABLE "new__store_product" RENAME TO "store_product";
CREATE INDEX "store_product_slug_6de8ee4b" ON "store_product" ("slug");
CREATE INDEX "store_product_collection_id_2914d2ba" ON "store_product" ("collection_id");
COMMIT;
(.venv) deepak@deepak-HP-ProBook-445-G1:~/Videos/django-project/storefront$ 


(.venv) deepak@deepak-HP-ProBook-445-G1:~/Videos/django-project/storefront$ python3 manage.py makemigrations
Migrations for 'store':
  store/migrations/0004_customer_store_custo_last_na_e6a359_idx_and_more.py
    - Create index store_custo_last_na_e6a359_idx on field(s) last_name, first_name of model customer
    - Rename table for customer to store_customers
(.venv) deepak@deepak-HP-ProBook-445-G1:~/Videos/django-project/storefront$ python3 manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, likes, sessions, store, tags
Running migrations:
  Applying store.0004_customer_store_custo_last_na_e6a359_idx_and_more... OK
(.venv) deepak@deepak-HP-ProBook-445-G1:~/Videos/django-project/storefront$ 



-- Reverting the Migrations
(.venv) deepak@deepak-HP-ProBook-445-G1:~/Videos/django-project/storefront$ python3 manage.py makemigrations
Migrations for 'store':
  store/migrations/0004_customer_store_custo_last_na_e6a359_idx_and_more.py
    - Create index store_custo_last_na_e6a359_idx on field(s) last_name, first_name of model customer
    - Rename table for customer to store_customers
(.venv) deepak@deepak-HP-ProBook-445-G1:~/Videos/django-project/storefront$ python3 manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, likes, sessions, store, tags
Running migrations:
  Applying store.0004_customer_store_custo_last_na_e6a359_idx_and_more... OK
(.venv) deepak@deepak-HP-ProBook-445-G1:~/Videos/django-project/storefront$ 


using mysql in django
pipenv install mysqlclient

error
mysql commnad not found

causes

mysql not installed properly

mysql is not in the path

2005  python3 manage.py makemigrations store --empty
 2006  python3 manage.py migrate
 2007  python3 manage.py migrate 0003
 2008  python3 manage.py migrate store 0003

# Generated by Django 5.1 on 2024-08-19 15:54

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('store', '0004_alter_product_slug'),
    ]

    operations = [
        migrations.RunSQL(
            """
            INSERT INTO store_collection(title)
            VALUES('collection1')
            """,
            """
            DELETE FROM store_collection
            WHERE title='collection1'
            """
        ),
    ]


mockaroo.com 
https://mockaroo.com/
to Generate Dummy Data
